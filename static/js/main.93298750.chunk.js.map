{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","repositories","teams","Map","buildRepos","console","log","forEach","r","teamName","split","t","name","push","_this2","this","baseUrl","process","axios","get","then","res","data","setState","catch","error","response","_this3","react_default","a","createElement","className","Object","keys","map","class","href","id","ref","element","hash","window","location","replace","scrollIntoView","target","rel","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAqGeA,6MA/FbC,MAAQ,CACNC,aAAc,GACdC,MAAO,IAAIC,OAGbC,WAAa,SAAUH,GACrBI,QAAQC,IAAI,cACZ,IAAIJ,EAAQ,IAAIC,IAehB,OAdAE,QAAQC,IAAI,cACZL,EAAaM,QAAQ,SAAAC,GACnB,IAAIC,EAAWD,EAAEE,MAAM,KAAK,GACxBC,EAAIT,EAAMO,GACL,MAALE,IACFA,EAAI,CACFC,KAAMH,EACNR,aAAc,IAEhBC,EAAMO,GAAYE,GAEpBA,EAAEV,aAAaY,KAAKL,KAEtBH,QAAQC,IAAIJ,GACLA,sFAGW,IAAAY,EAAAC,KAEdC,EAAO,0BAEXX,QAAQC,IAAIW,cAEVD,EAAO,wCAETE,IAAMC,IAAIH,GACPI,KAAK,SAAAC,GACJ,IAAMpB,EAAeoB,EAAIC,KAAKrB,aAE9Ba,EAAKS,SACH,CACEtB,aAAcA,EACdC,MAAOY,EAAKV,WAAWH,KAE3BI,QAAQC,IAAI,qBAAuBL,KAElCuB,MAAM,SAAAC,GACPpB,QAAQC,IAAImB,EAAMC,6CAIf,IAAAC,EAAAZ,KACP,OACEa,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,2CAICE,OAAOC,KAAKlB,KAAKf,MAAME,OAAOgC,IAAI,SAAAvB,GAAC,OAAIiB,EAAAC,EAAAC,cAAA,WACtCF,EAAAC,EAAAC,cAAA,OAAKK,MAAM,uBACpBP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,iBACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,eAAX,eAAqCP,EAAAC,EAAAC,cAAA,KAAGM,KAAM,IAAIzB,EAAG0B,GAAI1B,EACjD2B,IAAK,SAAAC,GAAW,IACNC,EAASC,OAAOC,SAAhBF,KACR,GAAa,KAATA,EAAa,CACf,IAAMH,EAAKG,EAAKG,QAAQ,IAAK,IACzBJ,EAAQF,KAAOA,GAAIE,EAAQK,oBAIhCjC,KAEbiB,EAAAC,EAAAC,cAAA,OAAKK,MAAM,cACXP,EAAAC,EAAAC,cAAA,cACUH,EAAK3B,MAAME,MAAMS,GAAGV,aAAaiC,IAAI,SAAA1B,GAAC,OACpCoB,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,KAEEM,KAAM,gCAAkC5B,EAAI,aAC5CqC,OAAO,SACPC,IAAI,uBAEHtC,oBAlFCuC,aCOEC,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.93298750.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\n/// <reference path=\"./interfaces.d.ts\" />\n\nclass App extends Component {\n  state = {\n    repositories: [],\n    teams: new Map()\n  }\n\n  buildRepos = function (repositories) {\n    console.log(\"BuildRepos\")\n    var teams = new Map()\n    console.log(\"BuildRepos\")\n    repositories.forEach(r => {\n      var teamName = r.split(\"/\")[0]\n      var t = teams[teamName];\n      if (t == null) {\n        t = {\n          name: teamName,\n          repositories: []\n        }\n        teams[teamName] = t\n      }\n      t.repositories.push(r);\n    });\n    console.log(teams)\n    return teams;\n  }\n\n  componentDidMount() {\n    //axios.get(`https://mcr.microsoft.com/v2/_catalog`)\n    var baseUrl = `/data/repositories.json`;\n\n    console.log(process.env.NODE_ENV)\n    if (process.env.NODE_ENV !== 'development') {\n      baseUrl = `/image-catalog/data/repositories.json`\n    }\n    axios.get(baseUrl)\n      .then(res => {\n        const repositories = res.data.repositories;\n\n        this.setState(\n          {\n            repositories: repositories,\n            teams: this.buildRepos(repositories)\n          });\n        console.log(\"Calling buildRepos\" + repositories)\n\n      }).catch(error => {\n        console.log(error.response)\n      });\n  }\n\n  render() {\n    return (\n      <div >\n        <div className=\"page-header\">\n         <h1>Microsoft Container Registry</h1> \n        </div>\n       \n        {\n          Object.keys(this.state.teams).map(t => <div >\n           <div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <div class=\"panel-title\">            <a href={\"#\"+t} id={t} \n            ref={element => {\n              const { hash } = window.location;\n              if (hash !== '') {\n                const id = hash.replace('#', '');\n                if (element.id === id) element.scrollIntoView();\n              }\n            }}\n//This is needed to send out hashlinks and probably a proper solution required. \n             >{t}</a></div>\n  </div>\n  <div class=\"panel-body\">\n  <ul > {\n            this.state.teams[t].repositories.map(r => \n              <li >\n              <a\n                \n                href={\"https://mcr.microsoft.com/v2/\" + r + \"/tags/list\"}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {r}\n              </a>\n            </li>\n            )\n          }</ul>\n  </div>\n</div> \n          </div>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}